Program: WordFinder
Objetivo
Implementar una clase WordFinder 
que identifique las 10 palabras m√°s frecuentes
de un stream de datos que est√°n presentes en una matriz de caracteres,
considerando apariciones (1) horizontales y (2) verticales

Restricciones:
Entradas
Matriz:64√ó64 chars max. as IEnumerable<string>

WordStream: Datos(stream) quizas grande de palabras a buscar 
grande pero finito (sino no podemos calcular el top 10)

Happy path:
Find: Las palabras se deben buscar l->r y t->b.
Suponemos:
 "cat" ="CAT" (case insensitive)
 No sabemos nada de la frecuencia de aparici√≥n en el stream o su tama√±o o su distribuci√≥n.

Conteo:
CONTAR = Verificar Existencia + Acumular Frecuencia
Paso 1: Verificar Existencia (¬øLa palabra est√° en la matriz?)
Una palabra "existe" si aparece al menos una vez en la matriz (horizontal o vertical)

No importa si aparece m√∫ltiples veces/orientaciones ‚Üí cuenta como 1 existencia

Resultado binario: ‚úì Existe / ‚úó No existe

Paso 2: Acumular Frecuencia (¬øCu√°ntas veces aparece en el stream?)
Por cada aparici√≥n en el stream donde la palabra existe ‚Üí +1 al contador

Stream con duplicados: Cada aparici√≥n √∫nica incrementa la frecuencia


Resultado: Top 10 palabras por frecuencia de aparici√≥n en el stream

Caso vac√≠o: Retornar colecci√≥n vac√≠a si no hay coincidencias

Requisitos de Performance
1. Alta eficiencia para flujos de palabras grandes

2. Optimizaci√≥n en uso de recursos del sistema (memoria y procesadores).

Algoritmo eficiente considerando el tama√±o limitado de la matriz (64√ó64)

üîç Reglas de B√∫squeda
Existencia en Matriz
text
Matriz Ejemplo:
c o l d
w i n d  
h o t x

"cold" ‚Üí ‚úì (horizontal, fila 1)
"wind" ‚Üí ‚úì (horizontal, fila 2) 
"down" ‚Üí ‚úó (no encontrada)
Conteo de Frecuencias
text
WordStream: ["cold", "cold", "wind", "hot", "cold", "heat"]

Frecuencias:
- "cold" ‚Üí 3 (aparece 3 veces en stream, existe en matriz)
- "wind" ‚Üí 1 (aparece 1 vez en stream, existe en matriz)  
- "hot" ‚Üí 1 (aparece 1 vez en stream, existe en matriz)
- "heat" ‚Üí 0 (no existe en matriz)

Resultado: ["cold", "wind", "hot"]
Dise√±o de la Interface
csharp
public class WordFinder
{
    // Constructor: Preprocesa la matriz para optimizar b√∫squedas
    public WordFinder(IEnumerable<string> matrix) { ... }
    
    // Find: Retorna top 10 palabras m√°s frecuentes del stream que existen en la matriz
    public IEnumerable<string> Find(IEnumerable<string> wordstream) { ... }
}
Criterios de √âxito
[]Correctitud: Identifica palabras horizontales/verticales exactamente

[] Performance: √ìptima para streams grandes mediante preprocesamiento

[] Precisi√≥n: Ranking correcto del top 10 por frecuencia real del stream

[] Robustez: Manejo adecuado de casos edge (matriz vac√≠a, stream vac√≠o, etc.)